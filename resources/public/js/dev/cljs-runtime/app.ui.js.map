{"version":3,"sources":["app/ui.cljs"],"mappings":"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","names":["options__57449__auto__","p__64408","map__64409","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","p__64411","map__64412","com.fulcrologic.fulcro.components/wrapped-render","map__64415","com.fulcrologic.fulcro.components/props","map__64416","com.fulcrologic.fulcro.components.get_computed","js/app","js/app.ui","js/app.ui.Person","props__57450__auto__","this__57451__auto__","temp__5733__auto__","init-state__57452__auto__","obj64435","G__64436","G__64437","goog.object/get","obj64439","com.fulcrologic.fulcro.components/configure-component!","app.ui/Person","this","id","name","age","props","onDelete","params","com.fulcrologic.fulcro.dom.macro_create_element","app.ui/ui-person","com.fulcrologic.fulcro.components.factory","p__64444","map__64445","p__64450","map__64451","map__64453","js/app.ui.PersonList","obj64464","G__64465","G__64466","obj64468","app.ui/PersonList","label","people","com.fulcrologic.fulcro.components.get_query","cljs.core._EQ_","com.fulcrologic.fulcro.components.get_initial_state","delete-person","person-id","com.fulcrologic.fulcro.components.transact_BANG_","G__64458","app.mutations/delete-person","p1__64440#","cljs.core.map","G__64459","com.fulcrologic.fulcro.components/computed","app.ui/ui-person-list","map__64472","js/app.ui.Root","obj64478","G__64479","G__64480","obj64484","app.ui/Root","friends","enemies"],"sourcesContent":["(ns app.ui\n  (:require\n    [app.mutations :as api]\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    [com.fulcrologic.fulcro.dom :as dom]))\n\n(defsc Person [this {:person/keys [id name age] :as props} {:keys [onDelete]}]\n  {:query         [:person/id :person/name :person/age]\n   :ident         (fn [] [:person/id (:person/id props)])\n   :initial-state (fn [{:keys [id name age] :as params}] {:person/id id :person/name name :person/age age})} ; (3)\n  (dom/li\n    (dom/h5 (str name \" (age: \" age \")\") (dom/button {:onClick #(onDelete id)} \"X\"))))\n\n(def ui-person (comp/factory Person {:keyfn :person/id}))\n\n(defsc PersonList [this {:list/keys [id label people] :as props}]\n  {:query [:list/id :list/label {:list/people (comp/get-query Person)}]\n   :ident (fn [] [:list/id (:list/id props)])\n   :initial-state\n          (fn [{:keys [id label]}]\n            {:list/id     id\n             :list/label  label\n             :list/people (if (= id :friends)\n                            [(comp/get-initial-state Person {:id 1 :name \"Sally\" :age 32})\n                             (comp/get-initial-state Person {:id 2 :name \"Joe\" :age 22})]\n                            [(comp/get-initial-state Person {:id 3 :name \"Fred\" :age 11})\n                             (comp/get-initial-state Person {:id 4 :name \"Bobby\" :age 55})])})}\n  (let [delete-person (fn [person-id] (comp/transact! this [(api/delete-person {:list/id id :person/id person-id})]))]\n    (dom/div\n      (dom/h4 label)\n      (dom/ul\n        (map #(ui-person (comp/computed % {:onDelete delete-person})) people)))))\n\n(def ui-person-list (comp/factory PersonList))\n\n(defsc Root [this {:keys [friends enemies]}]\n  {:query         [{:friends (comp/get-query PersonList)}\n                   {:enemies (comp/get-query PersonList)}]\n   :initial-state (fn [params] {:friends (comp/get-initial-state PersonList {:id :friends :label \"Friends\"})\n                                :enemies (comp/get-initial-state PersonList {:id :enemies :label \"Enemies\"})})}\n  (dom/div\n    (ui-person-list friends)\n    (ui-person-list enemies)))"]}