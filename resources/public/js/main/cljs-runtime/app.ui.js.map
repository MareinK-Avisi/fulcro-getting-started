{"version":3,"sources":["app/ui.cljs"],"mappings":"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","names":["options__46029__auto__","p__49710","map__49711","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","com.fulcrologic.fulcro.components/wrapped-render","map__49713","com.fulcrologic.fulcro.components/props","map__49714","com.fulcrologic.fulcro.components.get_computed","js/app","js/app.ui","js/app.ui.Person","props__46030__auto__","this__46031__auto__","temp__5733__auto__","init-state__46032__auto__","obj49718","G__49719","G__49720","goog.object/get","obj49722","com.fulcrologic.fulcro.components/configure-component!","app.ui/Person","this","id","name","age","props","onDelete","com.fulcrologic.fulcro.dom.macro_create_element","app.ui/ui-person","com.fulcrologic.fulcro.components.factory","p__49724","map__49725","map__49727","js/app.ui.PersonList","obj49732","G__49733","G__49734","obj49736","app.ui/PersonList","label","people","com.fulcrologic.fulcro.components.get_query","delete-person","person-id","com.fulcrologic.fulcro.components.transact_BANG_","G__49729","app.mutations/delete-person","p1__49723#","cljs.core.map","G__49730","com.fulcrologic.fulcro.components/computed","app.ui/ui-person-list","params","com.fulcrologic.fulcro.components/make-state-map","map__49737","js/app.ui.Root","obj49740","G__49741","G__49742","obj49744","app.ui/Root","friends","enemies","com.fulcrologic.fulcro.dom/macro-create-element*"],"sourcesContent":["(ns app.ui\n  (:require\n    [app.mutations :as api]\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    [com.fulcrologic.fulcro.dom :as dom]))\n\n(defsc Person [this {:person/keys [id name age] :as props} {:keys [onDelete]}]\n  {:query [:person/id :person/name :person/age]\n   :ident (fn [] [:person/id (:person/id props)])}\n  (dom/li\n    (dom/h5 (str name \" (age: \" age \")\") (dom/button {:onClick #(onDelete id)} \"X\")))) ; (4)\n\n(def ui-person (comp/factory Person {:keyfn :person/id}))\n\n(defsc PersonList [this {:list/keys [id label people] :as props}]\n  {:query [:list/id :list/label {:list/people (comp/get-query Person)}]\n   :ident (fn [] [:list/id (:list/id props)])}\n  (let [delete-person (fn [person-id] (comp/transact! this [(api/delete-person {:list/id id :person/id person-id})]))] ; (2)\n    (dom/div\n      (dom/ul\n        (map #(ui-person (comp/computed % {:onDelete delete-person})) people)))))\n\n(def ui-person-list (comp/factory PersonList))\n\n(defsc Root [this {:keys [friends enemies]}]\n  {:query         [{:friends (comp/get-query PersonList)}\n                   {:enemies (comp/get-query PersonList)}]\n   :initial-state {}}\n  (dom/div\n    (dom/h3 \"Friends\")\n    (when friends\n      (ui-person-list friends))\n    (dom/h3 \"Enemies\")\n    (when enemies\n      (ui-person-list enemies))))"]}